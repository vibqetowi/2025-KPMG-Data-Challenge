// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table practices {
  practice_id integer [primary key]
  practice_name varchar [note: 'E.g., SAP, Oracle, Cloud, Risk Advisory, etc.']
  description varchar
  
  indexes {
    practice_name // For searching by practice name
  }
}

Table employees {
  personnel_no integer [primary key]
  employee_name varchar
  staff_level varchar
  is_external bool
  employment_basis decimal [note: 'Contracted weekly hours (e.g., 40.0, 37.5)']
  practice_id integer [note: 'Primary consulting department/practice area']
  
  indexes {
    staff_level // Index to filter employees by level
    (staff_level, is_external) // index to filter by level and by internal/not
    practice_id // Index to filter by consulting practice
  }
}

Table clients {
  client_no integer [primary key]
  client_name varchar
  
  indexes {
    client_name // Index to search clients by name
  }
}

Table engagements {
  eng_no integer [primary key]
  eng_description varchar
  client_no integer
  start_date date [note: 'Engagement start date']
  end_date date [note: 'Planned engagement end date']
  actual_end_date date [note: 'Actual engagement completion date, NULL if ongoing']
  primary_practice_id integer [note: 'Main practice area responsible for delivery']
  
  indexes {
    client_no // Index for faster joins with clients table
    eng_description // Index for searching by description
    start_date // Index for timeline and schedule analysis
    end_date // Index for filtering upcoming project end dates
    primary_practice_id // Index for filtering by practice area
  }
}

Table charge_out_rates{
  eng_no integer
  personnel_no integer
  standard_chargeout_rate decimal
  
  indexes{
    (eng_no, personnel_no) [primary key]
  }
}

Table phases {
  eng_no integer
  eng_phase integer
  phase_description varchar
  budget decimal
  start_date date [note: 'Phase start date']
  end_date date [note: 'Planned phase end date']
  actual_end_date date [note: 'Actual phase completion date, NULL if ongoing']
  
  indexes {
    (eng_no, eng_phase) [pk] // composite primary key
    budget // Index for budget analysis queries
    start_date // Index for phase timeline tracking
    end_date // Index for phase schedule analysis
  }
}

Table staffing {
  personnel_no integer
  eng_no integer
  eng_phase integer
  week_start_date date [note: 'First Monday of the week, e.g. 2025-01-06']
  planned_hours decimal
  
  indexes {
    (personnel_no, eng_no, eng_phase, week_start_date) [pk] // Composite primary key
    (eng_no, eng_phase, week_start_date) // Project phase planning by time period
    week_start_date // For time-based reporting
    (eng_no, week_start_date) // Project timeline queries
  }
}

Table timesheets {
  id integer [primary key]
  personnel_no integer
  eng_no integer
  eng_phase integer
  work_date date
  hours decimal
  time_entry_date date
  posting_date date
  charge_out_rate decimal
  std_price decimal
  adm_surcharge decimal
  
  indexes {
    work_date // Time-based reporting and filtering
    (personnel_no, work_date) // Employee timesheet by date
    (eng_no, eng_phase, work_date) // Project phase activity by date
    posting_date // For accounting period reports
    (eng_no, work_date) // Project timeline analysis
  }
}

Table dictionary {
  key varchar [primary key]
  description varchar
}

Table vacations {
  personnel_no integer
  start_date date
  end_date date
  
  indexes {
    (personnel_no, start_date) [pk] // Composite primary key
    end_date // For filtering vacations by date range
    personnel_no // For filtering all vacations for an employee
  }
}

// Foreign key references
Ref: employees.practice_id > practices.practice_id
Ref: engagements.primary_practice_id > practices.practice_id
Ref: engagements.client_no > clients.client_no
Ref: phases.eng_no > engagements.eng_no
Ref: staffing.personnel_no > employees.personnel_no
Ref: staffing.(eng_no, eng_phase) > phases.(eng_no, eng_phase)
Ref: timesheets.personnel_no > employees.personnel_no
Ref: timesheets.(eng_no, eng_phase) > phases.(eng_no, eng_phase)
Ref: vacations.personnel_no > employees.personnel_no
Ref: charge_out_rates.eng_no > engagements.eng_no
Ref: charge_out_rates.personnel_no > employees.personnel_no
